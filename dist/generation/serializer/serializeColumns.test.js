"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const introspectDb_1 = __importDefault(require("../../introspection/introspectDb"));
const connectTestDb_1 = __importDefault(require("../../test/connectTestDb"));
const createModels_1 = __importDefault(require("../createModels"));
const createRelationships_1 = __importDefault(require("../createRelationships"));
const serializeColumns_1 = __importDefault(require("./serializeColumns"));
describe('serializeColumns', () => {
    let client;
    let User;
    let Product;
    beforeAll((done) => __awaiter(void 0, void 0, void 0, function* () {
        client = yield connectTestDb_1.default();
        const introspection = yield introspectDb_1.default(client, ['superluminal']);
        const models = {};
        createModels_1.default(models, introspection);
        createRelationships_1.default(models, introspection);
        Product = models.product;
        User = models.user;
        done();
    }));
    afterAll(() => {
        return client.end();
    });
    describe('with primary autogenerated column', () => {
        it('serializes with generated: true', () => {
            expect(serializeColumns_1.default(Product)).toMatchInlineSnapshot(`
        "  @Column('timestamp with time zone', {
            name: 'createdAt',
          })
          createdAt: Date;

          @Column('integer', {
            name: 'id', primary: true, generated: true, default: () => \\"nextval('superluminal.product_id_seq'::regclass)\\",
          })
          id: number;

          @Column('timestamp with time zone', {
            name: 'updatedAt',
          })
          updatedAt: Date;

          @Column('character varying', {
            name: 'url', nullable: true,
          })
          url: string | null;"
      `);
        });
    });
    describe('with graphql', () => {
        it('serializes with @Field()', () => {
            expect(serializeColumns_1.default(User, { graphql: true })).toMatchInlineSnapshot(`
        "  @Field(() => Boolean)
          @Column('boolean', {
            name: 'connected', nullable: true,
          })
          connected: boolean | null;

          @Field(() => Date)
          @Column('timestamp with time zone', {
            name: 'created_at', nullable: true, default: () => 'now()',
          })
          createdAt: Date | null;

          @Field(() => Number)
          @Column('integer', {
            name: 'credits', nullable: true, default: () => 0,
          })
          credits: number | null;

          @Field(() => String)
          @Column('character varying', {
            name: 'first_name', nullable: true,
          })
          firstName: string | null;

          @Field(() => String)
          @Column('character varying', {
            name: 'full_text', nullable: true,
          })
          fullText: string | null;

          @Field(() => [String])
          @Column('text', {
            name: 'hobbies', nullable: true,
          })
          hobbies: string[] | null;

          @Field(() => String)
          @Column('character varying', {
            name: 'last_name', nullable: true,
          })
          lastName: string | null;

          @Field(() => String)
          @Column('numeric', {
            name: 'rating', nullable: true, default: () => '0.88',
          })
          rating: string | null;

          @Field(() => ID)
          @Column('uuid', {
            name: 'slug', primary: true,
          })
          slug: string;

          @Field(() => Date)
          @Column('timestamp with time zone', {
            name: 'updated_at', nullable: true,
          })
          updatedAt: Date | null;"
      `);
        });
    });
    it('serializes all columns', () => {
        expect(serializeColumns_1.default(User)).toMatchInlineSnapshot(`
      "  @Column('boolean', {
          name: 'connected', nullable: true,
        })
        connected: boolean | null;

        @Column('timestamp with time zone', {
          name: 'created_at', nullable: true, default: () => 'now()',
        })
        createdAt: Date | null;

        @Column('integer', {
          name: 'credits', nullable: true, default: () => 0,
        })
        credits: number | null;

        @Column('character varying', {
          name: 'first_name', nullable: true,
        })
        firstName: string | null;

        @Column('character varying', {
          name: 'full_text', nullable: true,
        })
        fullText: string | null;

        @Column('text', {
          name: 'hobbies', nullable: true,
        })
        hobbies: string[] | null;

        @Column('character varying', {
          name: 'last_name', nullable: true,
        })
        lastName: string | null;

        @Column('numeric', {
          name: 'rating', nullable: true, default: () => '0.88',
        })
        rating: string | null;

        @Column('uuid', {
          name: 'slug', primary: true,
        })
        slug: string;

        @Column('timestamp with time zone', {
          name: 'updated_at', nullable: true,
        })
        updatedAt: Date | null;"
    `);
    });
});
